// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountCLF.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityEntity", b =>
                {
                    b.Property<int>("InverseReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("InverseStaffId")
                        .HasColumnType("int");

                    b.HasKey("InverseReferenceId", "InverseStaffId");

                    b.HasIndex("InverseStaffId");

                    b.ToTable("EntityEntity");
                });

            modelBuilder.Entity("Model.AccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Placcount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("Model.AccountSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsShow")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountSessions");
                });

            modelBuilder.Entity("Model.AddressDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LandMark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("EntityId");

                    b.ToTable("AddressDetails");
                });

            modelBuilder.Entity("Model.BasicProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Designation")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationNavigationId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DesignationNavigationId");

                    b.HasIndex("EntityId");

                    b.ToTable("BasicProfiles");
                });

            modelBuilder.Entity("Model.ContactProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactProfiles");
                });

            modelBuilder.Entity("Model.DocumentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocExtensionId")
                        .HasColumnType("int");

                    b.Property<int?>("DocType")
                        .HasColumnType("int");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("MasterTypeDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MasterTypeDetailId1")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SrNo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DocExtensionId");

                    b.HasIndex("DocType");

                    b.HasIndex("EntityId");

                    b.HasIndex("MasterTypeDetailId");

                    b.HasIndex("MasterTypeDetailId1");

                    b.ToTable("DocumentProfiles");
                });

            modelBuilder.Entity("Model.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TypeId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SrNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Model.MasterLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MasterLogins");
                });

            modelBuilder.Entity("Model.MasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SrNo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("MasterTypes");
                });

            modelBuilder.Entity("Model.MasterTypeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SrNo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("MasterTypeDetails");
                });

            modelBuilder.Entity("Model.ProfileLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProfileLinks");
                });

            modelBuilder.Entity("EntityEntity", b =>
                {
                    b.HasOne("Model.Entity", null)
                        .WithMany()
                        .HasForeignKey("InverseReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entity", null)
                        .WithMany()
                        .HasForeignKey("InverseStaffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.AccountGroup", b =>
                {
                    b.HasOne("Model.AccountGroup", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Model.AddressDetail", b =>
                {
                    b.HasOne("Model.MasterTypeDetail", "AddressType")
                        .WithMany("AddressDetails")
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("Model.Location", "City")
                        .WithMany("AddressDetails")
                        .HasForeignKey("CityId");

                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("AddressDetails")
                        .HasForeignKey("EntityId");

                    b.Navigation("AddressType");

                    b.Navigation("City");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.BasicProfile", b =>
                {
                    b.HasOne("Model.MasterTypeDetail", "DesignationNavigation")
                        .WithMany("BasicProfiles")
                        .HasForeignKey("DesignationNavigationId");

                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("BasicProfiles")
                        .HasForeignKey("EntityId");

                    b.Navigation("DesignationNavigation");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.ContactProfile", b =>
                {
                    b.HasOne("Model.MasterTypeDetail", "ContactType")
                        .WithMany("ContactProfiles")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("ContactProfiles")
                        .HasForeignKey("EntityId");

                    b.Navigation("ContactType");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.DocumentProfile", b =>
                {
                    b.HasOne("Model.MasterTypeDetail", "DocExtension")
                        .WithMany()
                        .HasForeignKey("DocExtensionId");

                    b.HasOne("Model.MasterTypeDetail", "DocTypeNavigation")
                        .WithMany()
                        .HasForeignKey("DocType");

                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("DocumentProfiles")
                        .HasForeignKey("EntityId");

                    b.HasOne("Model.MasterTypeDetail", null)
                        .WithMany("DocumentProfileDocExtensions")
                        .HasForeignKey("MasterTypeDetailId");

                    b.HasOne("Model.MasterTypeDetail", null)
                        .WithMany("DocumentProfileDocTypeNavigations")
                        .HasForeignKey("MasterTypeDetailId1");

                    b.Navigation("DocExtension");

                    b.Navigation("DocTypeNavigation");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.Entity", b =>
                {
                    b.HasOne("Model.AccountGroup", "AccountType")
                        .WithMany("Entities")
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("Model.Entity", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.HasOne("Model.AccountSession", "Session")
                        .WithMany("Entities")
                        .HasForeignKey("SessionId");

                    b.HasOne("Model.Entity", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("Model.MasterTypeDetail", "Type")
                        .WithMany("Entities")
                        .HasForeignKey("TypeId");

                    b.Navigation("AccountType");

                    b.Navigation("Reference");

                    b.Navigation("Session");

                    b.Navigation("Staff");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Model.Location", b =>
                {
                    b.HasOne("Model.Location", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("Model.MasterTypeDetail", "Type")
                        .WithMany("Locations")
                        .HasForeignKey("TypeId");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Model.MasterLogin", b =>
                {
                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("MasterLogins")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.MasterType", b =>
                {
                    b.HasOne("Model.MasterType", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Model.MasterTypeDetail", b =>
                {
                    b.HasOne("Model.MasterTypeDetail", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.HasOne("Model.MasterType", "Type")
                        .WithMany("MasterTypeDetails")
                        .HasForeignKey("TypeId");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Model.ProfileLink", b =>
                {
                    b.HasOne("Model.Entity", "Entity")
                        .WithMany("ProfileLinkEntities")
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Model.AccountGroup", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Model.AccountSession", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Model.Entity", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("BasicProfiles");

                    b.Navigation("ContactProfiles");

                    b.Navigation("DocumentProfiles");

                    b.Navigation("MasterLogins");

                    b.Navigation("ProfileLinkEntities");
                });

            modelBuilder.Entity("Model.Location", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Model.MasterType", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("MasterTypeDetails");
                });

            modelBuilder.Entity("Model.MasterTypeDetail", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("BasicProfiles");

                    b.Navigation("ContactProfiles");

                    b.Navigation("DocumentProfileDocExtensions");

                    b.Navigation("DocumentProfileDocTypeNavigations");

                    b.Navigation("Entities");

                    b.Navigation("InverseParent");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
